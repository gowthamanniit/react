=======================FINAL=========================
data.js --> Home.js -->ItemCard.js
cart.js
App.js (home+cart)
======================================
data.js
========
import appleimg from './images/apple.jpg'
import mangoimg from './images/mango.jpg'
import pomegranateimg from './images/pomegranate.jpg'

const data={
    productData:[
            {
            id:1,
            img:appleimg,
            title:"Apple",
            desc:"High QUality",
            price:50
            },
        {
            id:2,
            img:mangoimg,
            title:"Mango",
            desc:"No. 1 Quality",
            price:60            
        },
        {
        id:3,
        img:pomegranateimg,
        title:"Pomegranate",
        desc:"Indian Products",
        price:70        
        }
    ]
}
export default data
=====================================
Home.js
-------
import React from 'react'
import ItemCard from './ItemCard'
import data from './data'

export const Home = () => {
  return (
    <>
    <h1 className='text-center mt-3'>SHOPING CART</h1>

    <h2 className='text-center bg-info mt-3'>Created by: GOWTHAMAN.K (KALVI INSTITUTE KARUR) 9894083890</h2>

    <section className='py-4 container'>
    <div className='row justify-content-center'>
    {
    data.productData.map((item,index)=>{
      return(        
        
        <ItemCard 
        img={item.img} 
        title={item.title} 
        desc={item.desc} 
        price={item.price} 
        item={item} 
        key={index} 
        />
        
     )    
    })    
  }

    </div>
    </section>
    


    </>
  )
}
ItemCard.js
===========================
import React from "react"
import { useCart } from "react-use-cart"
const ItemCard=(props)=>
{
    const { addItem } =useCart()
    return(
    <div className="col-11 col-md-6 col-lg-3 mx-0 mb-4">                            
    <div className="card p-0 overflow-hidden h-100 shadow">
    <img src={props.img} className="card-img-top img-fluid" alt="img not found"/>
    <div className="card-body text-center">
    <h5 className="card-title">{props.title}</h5>
    <h5 className="card-title"> ₹ {props.price}</h5>
    <p className="card-text">{props.desc}</p>
    <button className="btn btn-success" onClick={()=>addItem(props.item)}>add to card</button>    
    </div>
    </div>
    </div>
    )
}
export default ItemCard
===================================
==================================
App.js
------
import '../node_modules/bootstrap/dist/css/bootstrap.min.css'
import { CartProvider } from 'react-use-cart'
import { Home } from './Home'
import Cart from './Cart'

function App()
{
  return(
    <>
      <CartProvider>
        <Home />
        <Cart />
      </CartProvider>
    </>
  )
}
export default App
=================================================
Index.js
--------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { CartProvider } from 'react-use-cart';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <CartProvider>
    <App />
    </CartProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
//////////////////////////////////////////////////////////////////
cart.js
=======
import React from 'react'
import { useCart } from 'react-use-cart'

const Cart = () => {
  const show=()=>{
   // console.log(`http://localhost:3005?amount=${cartTotal}`)
    window.location.href=`http://localhost:3005?amount=${cartTotal}`
    
  }

const { isEmpty,
        totalUniqueItems,        
        items,
        totalItems,
        cartTotal,
        updateItemQuantity,
        removeItem,
        emptyCart,
      } = useCart();
      if (isEmpty) return <h1 className='text-center'>your cart is empty</h1>
return(
  <section className='py-4 container'>
    <div className='row justify-content-center'>
        <div className='col-12 '>
          <h5>Cart:({totalUniqueItems}) Total Items:({totalItems})</h5>
          {/* <button className='btn btn-danger' onClick={()=>emptyCart(this)}>empty cart</button> */}
          <table className='table table-light table-hover m-0'>
            <tbody>
            {
              items.map((item,index)=>{
                return(
                <tr key={index}>
                  <td><img src={item.img} style={{height:"6rem"}} alt=""></img></td>
                  <td>{item.title}</td>
                  <td> ₹ {item.price}</td>
                  <td>qty:{item.quantity}</td>
                  <td>
                  <button className='btn btn-info ms-2' onClick={()=>updateItemQuantity(item.id,item.quantity-1)}>-</button>
                  <button className='btn btn-info ms-2' onClick={()=>updateItemQuantity(item.id,item.quantity+1)}>+</button>
                  <button className='btn btn-danger ms-2'onClick={()=>removeItem(item.id)}>Remove Item</button>
                  
                  </td>
                </tr>)
              })
            }
            </tbody>
          </table>          
        </div>
        <div className='col-auto ms-auto'>
            <h2>Total Price : ₹ {cartTotal}</h2>
        </div>
        <div className='col-auto'>
            <button className='btn btn-danger' onClick={()=>emptyCart()}>Clear Cart</button>
            <button className='btn btn-primary ms-2'
            onClick={show}>
              Buy Now</button>
        </div>
        
    </div>
  </section>
)
}
export default Cart

===========================back end ==================

{
  "dependencies": {
    "body-parser": "^1.20.3",
    "ejs": "^3.1.10",
    "express": "^4.21.2",
    "nodemon": "^3.1.9",
    "stripe": "^17.7.0"
  }
}

views folder : card.js
==========================
const stripe = Stripe('pk_test_51QxQLA2Q9WaUYQde9qEKn74Lz08oxJ7Esus7nfyKeiLw3WLC5xcT1ak4K2Zx1STDTfVOXTPSI5ftUPXtw190GrN000d34OFzMQ');
const elements = stripe.elements();

var style = {
    base: {
        color: "#fff"
    }
}
const card = elements.create('card', { style });
card.mount('#card-element');

const form = document.querySelector('form');
const errorEl = document.querySelector('#card-errors');

const stripeTokenHandler = token => {
    const hiddenInput = document.createElement('input');
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', 'stripeToken');
    hiddenInput.setAttribute('value', token.id);
    form.appendChild(hiddenInput);

    console.log(form)
    form.submit();
}

form.addEventListener('submit', e => {
    e.preventDefault();

    stripe.createToken(card).then(res => {
        if (res.error) errorEl.textContent = res.error.message;
        else {
            console.log(res.token)
            stripeTokenHandler(res.token);
        }
    })
})

views folder: complete.html
==============================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900">
    <nav class="bg-purple-900 h-20 flex justify-center">
    <h1 class="text-white">Stripe Node App</h1>
    </nav>
    <div class="flex flex-col items-center mt-32 text-white">
    <p>Thank you for your generous donation</p>
    <p>Your Payment has been Received</p>
    <a href="/"><button class="bg-blue-700 rounded p-2 mt-3">Return</button></a>
    </div>
</body>
</html>

views folder: index.html
--------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stripe Payment App</title>    
    <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">
    
    
    <script type="text/javascript">
        function fillamt()
        {
            var cururl=window.location.href
            // to get current url in address bar
            console.log("Current URL:",cururl)

            var url = new URL(cururl);
            var amt = url.searchParams.get("amount");
            console.log("amount:",amt);

            document.getElementById("price").value=amt;
        }
    </script>
</head>
<body class="bg-gray-900" onload="fillamt()">        
    <nav class="text-purple-900 h-20 flex justify-center">
    <h1 class="text-white">Stripe Node App</h1>
    </nav>
    <div class="flex justify-center mt-3">
    <form action="http://127.0.0.1:3005/charge" method="post" class="flex flex-col w-1/3">

        
        <input type="text" name="name" placeholder="Enter Name" class="bg-transparent text-white p-3 h-10 mb-5">
        <input type="email" name="email" placeholder="Enter Email" class="bg-transparent text-white p-3 h-10 mb-5">
        <input type="text" id="price" readonly name="amount" placeholder="Enter Amount" class="bg-transparent text-white p-3 h-10 mb-5">
        <div id="card-element" class="bg-transparent text-white p-2 h-10 mb-4"></div>
        <div id="card-errors" role="alert"></div>
        <input type="submit" value="submit Payment" class="bg-purple-900 text-white p-4 rounded">
    </form>
    </div>
</body>
<script src="https://js.stripe.com/v3/"></script>
    <script src="card.js"></script>
</html>

server.js
===============
const express = require('express')
const bodyParser = require('body-parser')
const path = require('path')
const stripe = require('stripe')('sk_test_51QxQLA2Q9WaUYQdeuz9XiSCOGOu99DIAsrdn0th3yYbcos80bVMS3rUjCeIJSOIMThv78Vm3seSG981JLwzoU4dh001xzWdEBJ') // change the secret key
const app = express()
app.use(bodyParser.urlencoded({ extended: true }))

app.set('view engine', 'ejs');
app.engine('html', require('ejs').renderFile);

app.use(express.static(path.join(__dirname, './views')));

app.get('/', (req,res) => {
	res.render('index.html');
   //res.sendFile('index.html')
})

app.post('/charge', (req, res) => {
    console.log("test............")
    try {
        stripe.customers.create({
            name: req.body.name,
            email: req.body.email,
            source: req.body.stripeToken
        }).then(customer => stripe.charges.create({
            amount: req.body.amount * 100,
            currency: 'usd',
            customer: customer.id,
            description: 'Thank you for your generous donation.'
        })).then(() => res.render('complete.html'))
            .catch(err => console.log(err))
    } catch (err) { res.send(err) }
}).listen(3005)
console.log("port listening at 3005 ............")

