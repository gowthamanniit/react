useEffect Hook:
============
use: 
*)automattically called very first time useEffect
*)automattically called useEffect & dom update when chagnges the state 
important note:
	==> don't use set/update inside useEffect
	==> suppose if you apply set inside useEffect,the chain will apply auto
		i.e (infinite ....)


header file:
import { useEffect } from 'react'

syntax:

function functionname()
{

	useEffect(()=>{//auto called when change the state
	...............
	})
	return(
	
	)
}
export default functionname
note: don't use setstate inside the useeffect, because auto call again in useeffect.
ex:1
import { useState,useEffect } from 'react'
function Gowtham()
{
const[name,setName]=useState("adaikalasamy")

useEffect(()=>{
  document.title=`Hello ${name}`
})
  return(
    <>
      <h1>React Hook - useEffect</h1>
      <button onClick={()=>{setName("dinesh")}}>Change Name</button>
    </>
  )
}
export default Gowtham

ex:2
import { useState,useEffect } from 'react'
function Gowtham()
{
const[name,setName]=useState("adaikalasamy")

useEffect(()=>{
  document.title=`Hello ${name}`
})
  return(
    <>
      <h1>React Hook - useEffect</h1>
      <input type="text" onChange={(event)=>{setName(event.target.value)}}></input>
      <button onClick={()=>{setName("dinesh")}}>Change Name</button>
    </>
  )
}
export default Gowtham

ex:3 best
============

import { useState,useEffect } from "react"
function App()
{
  const[count,setCount]=useState(0)

  useEffect(()=>{
    setTimeout(()=>{document.title="gowthaman"+count},4000)
  })

  const dis=()=>{
    document.title="manoj"
     setCount(count+1)  //automattically called useeffect and return dom
  }

  return(
    <>
    <button onClick={dis}>click me</button>
    <h1>Count:{count}</h1>  
    </>
  )
}
export default App
