What is ES6?
==============
ES6 stands for ECMAScript 6.
ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, 
it was published in 2015, and is also known as ECMAScript 2015.
-----------------------------------
Why Should I Learn ES6?
==========================
React uses ES6, and you should be familiar with some of the new features like:

1) Classes
2) Arrow Functions
3) Variables (let, const, var)
4) Array Methods like .map()
5) Destructuring
6) Modules
7) Ternary Operator
8) Spread Operator
-------------------------------------------
1) Classes
========
ES6 introduced classes.

A class is a type of function, but instead of using the keyword function to initiate it, 
we use the keyword class, and the properties are assigned inside a constructor() method.

Example
// Arrow function with Arg passing:
import React from 'react'
class App extends React.Component
{
  render()
  {
    const show=(v1,v2)=>{
      alert(v1+v2)
    }
    return(
        <>
        <h1>Arrow Function with arguments or parameter</h1>
          <button onClick={()=>show(11,22)}>Click me</button>
        </>
    )
  }
}
export default App

====----===
The super() method refers to the parent class.

By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.

===================================================================================================================
2) arrow function:
===================================================================================================================
Before Function: (normal)
----------------
<p id="demo"></p>
<script>
hello = function() {
  return "Hello World!";
}

document.getElementById("demo").innerHTML = hello();
</script>

note: Here function is a keyword
----------------------------
arrow function (advanced)
==============================
<p id="demo"></p>
  
<script>
hello = () => {
  return "Hello World!";
}

document.getElementById("demo").innerHTML = hello();
</script>

-------------------------------
Arrow Functions Return Value by Default: note: remove {}  and return (only if we use single statement)
hello = () => "Hello World!";
==================================
arrow function with parameter or arguments
----------------------------------------------
<p id="demo"></p>
  
<script>
hello = (val) => "Hello " + val;

document.getElementById("demo").innerHTML = hello("World");
</script>
----------------------------------------
arrow functionw without parenthesis
---------------------------------

<p id="demo"></p>
  
<script>
hello = val => "Hello " + val;

document.getElementById("demo").innerHTML = hello("World");
</script>
===================================
3) Variables
=============
var,let,const

var --> 
=======

var
var x = 5.6;

If you use var outside of a function, it belongs to the global scope.

If you use var inside of a function, it belongs to that function.

If you use var inside of a block, i.e. a for loop, the variable is still available outside of that block.

var has a function scope, not a block scope.

====================================
let:
let x = 5.6;

let is the block scoped version of var, and is limited to the block (or expression) where it is defined.

If you use let inside of a block, i.e. a for loop, the variable is only available inside of that loop.

let has a block scope.
=====================================
const
const x = 5.6;

const is a variable that once it has been created, its value can never change.

const has a block scope.
============================================================================================================
4)Array Methods
There are many JavaScript array methods.

One of the most useful in React is the .map() array method.

The .map() method allows you to run a function on each item in the array, returning a new array as the result.

In React, map() can be used to generate lists.
=================================------------------------------------------------
import React from 'react';
import ReactDOM from 'react-dom';

const myArray = ['apple', 'banana', 'orange'];

const myList = myArray.map((item) => <p>{item}</p>)

ReactDOM.render(myList, document.getElementById('root'));
-=====================------------------------------------------------------------

5) React ES6 Destructuring
----------------------------------------------------------------------------------
Destructuring makes it easy to extract only what is needed from array or object.

Destructing Arrays
Here is the old way of assigning array items to a variable:
          
          =============old way ======
Before: (old way)
const vehicles = ['mustang', 'f-150', 'expedition'];

// old way
const car = vehicles[0];
const truck = vehicles[1];
const suv = vehicles[2];
           =========== new way ========

const vehicles = ['mustang', 'f-150', 'expedition'];

const [car, truck, suv] = vehicles;

note: When destructuring arrays, the order that variables are declared is important.
============================take particular values====================
If we only want the car and suv we can simply leave out the truck but keep the comma:

const vehicles = ['mustang', 'f-150', 'expedition'];
const [car,, suv] = vehicles;
======================Destructuring comes in handy when a ================== function returns an array:==================================


<!DOCTYPE html>
<html>

<body>
  
<script>
function calculate(a, b) {
  const add = a + b;
  const subtract = a - b;
  const multiply = a * b;
  const divide = a / b;

  return [add, subtract, multiply, divide]; ------------------> this is array 
}

const [add, subtract, multiply, divide] = calculate(4, 7);  ------------> const [add,sub,mu.....] is destructing = calculate(4,7) calling function()

document.write("<p>Sum: " + add + "</p>");
document.write("<p>Difference " + subtract + "</p>");
document.write("<p>Product: " + multiply + "</p>");
document.write("<p>Quotient " + divide + "</p>");
</script>

</body>
</html>
===============================================

Destructuring Objects---------> old way
========================================
Here is the old way of using an object inside a function:

Before:
const vehicleOne = {        ------->this is json object
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

// old way
function myVehicle(vehicle) {
  const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '.';
}

destructing object ---------> new way
=======================================
<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>
  
<script>
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';

  document.getElementById("demo").innerHTML = message;
}
</script>

</body>
</html>

destructiong nested object ----------> new
===================================================
<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>
  
<script>
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red',
  registration: { -------------------> this is nested object
    city: 'Houston',
    state: 'Texas',
    country: 'USA'
  }
}

myVehicle(vehicleOne)

function myVehicle({ model, registration: { state } }) {
  const message = 'My ' + model + ' is registered in ' + state + '.';

  document.getElementById("demo").innerHTML = message;
}
</script>

</body>
</html>

6) React ES6 Spread Operator(...)
====================================================================================

Spread Operator
The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.

<!DOCTYPE html>
<html>

<body>

<script>
const numbersOne = [1, 2, 3];
const numbersTwo = [4, 5, 6];
const numbersCombined = [...numbersOne, ...numbersTwo];

document.write(numbersCombined);
</script>

</body>
</html>

o/p: 1,2,3,4,5,6
=====================spread operator with destructing=====
<!DOCTYPE html>
<html>

<body>

<script>
const numbers = [1, 2, 3, 4, 5, 6];

const [one, two, ...rest] = numbers;

document.write("<p>" + one + "</p>");
document.write("<p>" + two + "</p>");
document.write("<p>" + rest + "</p>");
</script>

</body>
</html>

o/p
1
2
3,4,5,6

note: one ,two ---> variables
      rest-----> array 
 
 ========================================   spread operator using object  ===========================
 <!DOCTYPE html>
<html>

<body>

<script>
const myVehicle = {
  brand: 'Ford',
  model: 'Mustang',
  color: 'red'
}

const updateMyVehicle = {
  type: 'car',
  year: 2021, 
  color: 'yellow'
}

const myUpdatedVehicle = {...myVehicle, ...updateMyVehicle}

//Check the result object in the console:
console.log(myUpdatedVehicle);
alert(myUpdatedVehicle);
</script>

<p>Press F12 for console view</p>

</body>
</html>

note: color two times repeated in two objects.but only one color accepted.(yellow)
===============================================================================
7)React ES6 Modules
===============================================================================
Modules
JavaScript modules allow you to break up your code into separate files.

This makes it easier to maintain the code-base.

ES Modules rely on the import and export statements.

Export
=======
You can export a function or variable from any file.

Let us create a file named person.js, and fill it with the things we want to export.

There are two types of exports: Named and Default.
==================================================

Named Exports
=============
You can create named exports two ways. In-line individually, or all at once at the bottom.

In-line individually:
====================
person.js

export const name = "Jesse"
export const age = "40"
note: only one export we can give in-line individually
All at once at the bottom:
==========================
person.js

const name = "Jesse"
const age = "40"

export { name, age }

Default Exports
================
Let us create another file, named message.js, and use it for demonstrating default export.

You can only have one default export in a file.

Example
message.js

const message = () => {
  const name = "Jesse";
  const age = "40";
  return name + ' is ' + age + 'years old.';
};

export default message;
-------------------------------------------------------------------------------------
Import
======
You can import modules into a file in two ways, based on if they are named exports or default exports.

Named exports must be destructured using curly braces. 

Default exports do not.

Import from named exports
=========================
Import named exports from the file person.js:

<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>

<script type="module">
import { name, age } from "./person.js";

document.getElementById("demo").innerHTML = "My name is " + name;
document.getElementById("demo").innerHTML += ", I am " + age + ".";

</script>

</body>
</html>

import from default exports:
=============================

<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>

<script type="module">
import message from "./message.js";

document.getElementById("demo").innerHTML = message();

</script>

</body>
</html>

7) ternary operator
=========================================================================
<!DOCTYPE html>
<html>

<body>

<h1 id="demo"></h1>

<script>
function renderApp() {
  document.getElementById("demo").innerHTML = "Welcome!";
}

function renderLogin() {
  document.getElementById("demo").innerHTML = "Please log in";
}

let authenticated = false;

authenticated ? renderApp() : renderLogin();

</script>

<p>Try changing the "authenticated" variable to false, and run the code to see what happens.</p>
</body>
</html>

